// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cudf;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.cudf.global.cudf.*;



/**
 * \brief Source information for read interfaces
 */
@Namespace("cudf::experimental::io") @NoOffset @Properties(inherit = org.bytedeco.cudf.presets.cudf.class)
public class source_info extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public source_info(Pointer p) { super(p); }

  public native @Cast("cudf::experimental::io::io_type") int type(); public native source_info type(int setter);
  public native @StdString BytePointer filepath(); public native source_info filepath(BytePointer setter);
  public native @ByRef std::pair<const char*,size_t> buffer(); public native source_info buffer(char*,size_t> setter);
  public native @SharedPtr RandomAccessFile file(); public native source_info file(RandomAccessFile setter);

  public source_info(@StdString BytePointer file_path) { super((Pointer)null); allocate(file_path); }
  private native void allocate(@StdString BytePointer file_path);
  public source_info(@StdString String file_path) { super((Pointer)null); allocate(file_path); }
  private native void allocate(@StdString String file_path);

  public source_info(@Cast("const char*") BytePointer host_buffer, @Cast("size_t") long size) { super((Pointer)null); allocate(host_buffer, size); }
  private native void allocate(@Cast("const char*") BytePointer host_buffer, @Cast("size_t") long size);
  public source_info(String host_buffer, @Cast("size_t") long size) { super((Pointer)null); allocate(host_buffer, size); }
  private native void allocate(String host_buffer, @Cast("size_t") long size);

  public source_info(
        @SharedPtr RandomAccessFile arrow_file) { super((Pointer)null); allocate(arrow_file); }
  private native void allocate(
        @SharedPtr RandomAccessFile arrow_file);
}
