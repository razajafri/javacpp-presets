// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cudf;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.cudf.global.cudf.*;

/**---------------------------------------------------------------------------*
 * \brief Maps a C++ type to it's corresponding {@code cudf::type_id}
 *
 * When explicitly passed a template argument of a given type, returns the
 * appropriate {@code type_id} enum for the specified C++ type.
 *
 * For example:
 *
 * <pre>{@code
 * return cudf::type_to_id<int32_t>();        // Returns INT32
 * }</pre>
 *
 * \tparam T The type to map to a {@code cudf::type_id}
 *---------------------------------------------------------------------------**/

@Namespace("cudf::experimental") @Properties(inherit = org.bytedeco.cudf.presets.cudf.class)
public class type_to_name extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public type_to_name() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public type_to_name(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public type_to_name(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public type_to_name position(long position) {
        return (type_to_name)super.position(position);
    }

}
