// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cudf;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.cudf.global.cudf.*;


@Properties(inherit = org.bytedeco.cudf.presets.cudf.class)
public class int_fastdiv extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public int_fastdiv() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public int_fastdiv(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public int_fastdiv(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public int_fastdiv position(long position) {
        return (int_fastdiv)super.position(position);
    }

	// divisor != 0 
	public native @ByVal __host__ int_fastdiv(int divisor/*=0*/);
	public native @ByVal __host__ int_fastdiv(); public native @ByRef d divisor(); public native int_fastdiv divisor(d setter);
	public native int M(); public native int_fastdiv M(int setter);
	public native int s(); public native int_fastdiv s(int setter);
	public native int n_add_sign(); public native int_fastdiv n_add_sign(int setter);

	// Hacker's Delight, Second Edition, Chapter 10, Integer Division By Constants
	public native @ByVal __host__ update_magic_numbers();

	
}
