// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cudf;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.cudf.global.cudf.*;


@Name("std::numeric_limits<cudf::timestamp_D>") @Properties(inherit = org.bytedeco.cudf.presets.cudf.class)
public class std::numeric_limits<cudf::timestamp_D> extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public std::numeric_limits<cudf::timestamp_D>() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public std::numeric_limits<cudf::timestamp_D>(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public std::numeric_limits<cudf::timestamp_D>(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public std::numeric_limits<cudf::timestamp_D> position(long position) {
        return (std::numeric_limits<cudf::timestamp_D>)super.position(position);
    }

    public static native @ByVal @Cast("const cudf::timestamp_D*") @NoException timestamp max();
    public static native @ByVal @Cast("const cudf::timestamp_D*") @NoException timestamp lowest();
    public static native @ByVal @Cast("const cudf::timestamp_D*") @NoException timestamp min();
  }
