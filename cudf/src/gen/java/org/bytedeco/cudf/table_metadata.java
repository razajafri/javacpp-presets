// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cudf;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.cudf.global.cudf.*;


/**
 * \brief Table metadata for io readers/writers (primarily column names)
 * For nested types (structs, maps, unions), the ordering of names in the column_names vector
 * corresponds to a pre-order traversal of the column tree.
 * In the example below (2 top-level columns: struct column "col1" and string column "col2"),
 *  column_names = {"col1", "s3", "f5", "f6", "f4", "col2"}.
 *
 *     col1     col2 
 *      / \ 
 *     /   \ 
 *   s3    f4 
 *   / \ 
 *  /   \ 
 * f5    f6 
 */
@Namespace("cudf::experimental::io") @Properties(inherit = org.bytedeco.cudf.presets.cudf.class)
public class table_metadata extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public table_metadata() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public table_metadata(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public table_metadata(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public table_metadata position(long position) {
        return (table_metadata)super.position(position);
    }

  /** Names of columns contained in the table */
  public native @StdString @StdVector BytePointer column_names(); public native table_metadata column_names(BytePointer setter);
  /** Format-dependent metadata as key-values pairs */
  public native @ByRef MapStringString user_data(); public native table_metadata user_data(MapStringString setter);
}
