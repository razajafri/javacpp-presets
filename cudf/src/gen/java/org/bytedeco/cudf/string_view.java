// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cudf;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.cudf.global.cudf.*;


/**
 * \brief A non-owning, immutable view of device data that is a variable length
 * char array representing a UTF-8 string. The caller must maintain the
 * device memory for the lifetime of this instance.
 *
 * It provides a simple wrapper and string operations for an individual string
 * with a column of strings.
 */
@Namespace("cudf") @NoOffset @Properties(inherit = org.bytedeco.cudf.presets.cudf.class)
public class string_view extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public string_view(Pointer p) { super(p); }


  /**
   * \brief Default constructor represents an empty string.
   */
  public native @ByVal __host__ string_view();

  /**
   * \brief Create instance from existing device char array.
   *
   * @param data Device char array encoded in UTF8.
   * @param bytes Number of bytes in data array.
   */
  public native @ByVal __host__ string_view(@Cast("const char*") BytePointer data, @ByVal size_type bytes);
  public native @ByVal __host__ string_view(String data, @ByVal size_type bytes);

  public string_view(@Const @ByRef string_view arg0) { super((Pointer)null); allocate(arg0); }
  private native void allocate(@Const @ByRef string_view arg0);
  public native @ByRef @Name("operator =") string_view put(@Const @ByRef string_view arg0);

  /**
   * \brief Return the number of bytes in this string
   */
  public native @ByVal __host__ size_bytes();
  /**
   * \brief Return the number of characters in this string
   */
  public native @ByVal __device__ length();
  /**
   * \brief Return a pointer to the internal device array
   */
  public native @Const __host__ data();

  /**
   * \brief Return true if string has no characters
   */
  public native @ByVal __host__ empty();
  /**
   * \brief Return true if string is NULL.
   * That is, {@code data()==nullptr} for this instance.
   */
  public native @ByVal __host__ is_null();

  /**
   * \brief Handy iterator for navigating through encoded characters.
   */
  @NoOffset public static class const_iterator extends Pointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public const_iterator(Pointer p) { super(p); }
  
      public native @ByVal __device__ const_iterator(@Const @ByRef string_view str, @ByVal size_type pos);
      public const_iterator(@Const @ByRef const_iterator mit) { super((Pointer)null); allocate(mit); }
      private native void allocate(@Const @ByRef const_iterator mit);
      public native @ByRef @Name("operator =") const_iterator put(@Const @ByRef const_iterator arg0);
      public native @ByRef @Name("operator ++") __device__ increment();
      public native @ByVal @Name("operator ++") __device__ increment(int arg0);
      public native @ByRef @Name("operator +=") __device__ addPut(@Cast("cudf::string_view::const_iterator::difference_type") long arg0);
      public native @ByVal @Name("operator +") __device__ add(@Cast("cudf::string_view::const_iterator::difference_type") long arg0);
      public native @ByRef @Name("operator --") __device__ decrement();
      public native @ByVal @Name("operator --") __device__ decrement(int arg0);
      public native @ByRef @Name("operator -=") __device__ subtractPut(@Cast("cudf::string_view::const_iterator::difference_type") long arg0);
      public native @ByVal @Name("operator -") __device__ subtract(@Cast("cudf::string_view::const_iterator::difference_type") long arg0);
      public native @ByVal @Name("operator ==") __device__ equals(@Const @ByRef const_iterator arg0);
      public native @ByVal @Name("operator !=") __device__ notEquals(@Const @ByRef const_iterator arg0);
      public native @ByVal @Name("operator <") __device__ lessThan(@Const @ByRef const_iterator arg0);
      public native @ByVal @Name("operator *") __device__ multiply();
      public native @ByVal @Name("position") __device__ _position();
      public native @ByVal __device__ byte_offset();
  }

  /**
   * \brief Return new iterator pointing to the beginning of this string
   */
  public native @ByVal __device__ begin();
  /**
   * \brief Return new iterator pointing past the end of this string
   */
  public native @ByVal __device__ end();

  /**
   * \brief Return single UTF-8 character at the given character position
   *
   * @param pos Character position
   */
  public native @ByVal @Name("operator []") __device__ get(@ByVal size_type pos);
  /**
   * \brief Return the byte offset from data() for a given character position
   *
   * @param pos Character position
   */
  public native @ByVal __device__ byte_offset(@ByVal size_type pos);

  /**
   * \brief Comparing target string with this string. Each character is compared
   * as a UTF-8 code-point value.
   *
   * @param str Target string to compare with this string.
   * @return 0  If they compare equal.
   *         <0 Either the value of the first character of this string that does
   *            not match is lower in the arg string, or all compared characters
   *            match but the arg string is shorter.
   *         >0 Either the value of the first character of this string that does
   *            not match is greater in the arg string, or all compared characters
   *            match but the arg string is longer.
   */
  public native @ByVal __device__ compare(@Const @ByRef string_view str);
  /**
   * \brief Comparing target string with this string. Each character is compared
   * as a UTF-8 code-point value.
   *
   * @param str Target string to compare with this string.
   * @param bytes Number of bytes in str.
   * @return 0  If they compare equal.
   *         <0 Either the value of the first character of this string that does
   *            not match is lower in the arg string, or all compared characters
   *            match but the arg string is shorter.
   *         >0 Either the value of the first character of this string that does
   *            not match is greater in the arg string, or all compared characters
   *            match but the arg string is longer.
   */
  public native @ByVal __device__ compare(@Cast("const char*") BytePointer str, @ByVal size_type bytes);
  public native @ByVal __device__ compare(String str, @ByVal size_type bytes);

  /**
   * \brief Returns true if rhs matches this string exactly.
   */
  public native @ByVal @Name("operator ==") __device__ equals(@Const @ByRef string_view rhs);
  /**
   * \brief Returns true if rhs does not match this string.
   */
  public native @ByVal @Name("operator !=") __device__ notEquals(@Const @ByRef string_view rhs);
  /**
   * \brief Returns true if this string is ordered before rhs.
   */
  public native @ByVal @Name("operator <") __device__ lessThan(@Const @ByRef string_view rhs);
  /**
   * \brief Returns true if rhs is ordered before this string.
   */
  public native @ByVal @Name("operator >") __device__ greaterThan(@Const @ByRef string_view rhs);
  /**
   * \brief Returns true if this string matches or is ordered before rhs.
   */
  public native @ByVal @Name("operator <=") __device__ lessThanEquals(@Const @ByRef string_view rhs);
  /**
   * \brief Returns true if rhs matches or is ordered before this string.
   */
  public native @ByVal @Name("operator >=") __device__ greaterThanEquals(@Const @ByRef string_view rhs);

  /**
   * \brief Returns the character position of the first occurrence where the
   * argument str is found in this string within the character range [pos,pos+n).
   *
   * @param str Target string to search within this string.
   * @param pos Character position to start search within this string.
   * @param count Number of characters from pos to include in the search.
   *              Specify -1 to indicate to the end of the string.
   * @return -1 if str is not found in this string.
   */
  public native @ByVal __device__ find( @Const @ByRef string_view str, @ByVal(nullValue = "size_type(0)") size_type pos, @ByVal(nullValue = "size_type(-1)") size_type count );
  public native @ByVal __device__ find( @Const @ByRef string_view str );
  /**
   * \brief Returns the character position of the first occurrence where the
   * array str is found in this string within the character range [pos,pos+n).
   *
   * @param str Target array to search within this string.
   * @param bytes Number of bytes in str.
   * @param pos Character position to start search within this string.
   * @param count Number of characters from pos to include in the search.
   *              Specify -1 to indicate to the end of the string.
   * @return -1 if arg string is not found in this string.
   */
  public native @ByVal __device__ find( @Cast("const char*") BytePointer str, @ByVal size_type bytes, @ByVal(nullValue = "size_type(0)") size_type pos, @ByVal(nullValue = "size_type(-1)") size_type count );
  public native @ByVal __device__ find( @Cast("const char*") BytePointer str, @ByVal size_type bytes );
  public native @ByVal __device__ find( String str, @ByVal size_type bytes, @ByVal(nullValue = "size_type(0)") size_type pos, @ByVal(nullValue = "size_type(-1)") size_type count );
  public native @ByVal __device__ find( String str, @ByVal size_type bytes );
  /**
   * \brief Returns the character position of the first occurrence where
   * character is found in this string within the character range [pos,pos+n).
   *
   * @param character Single encoded character.
   * @param pos Character position to start search within this string.
   * @param count Number of characters from pos to include in the search.
   *              Specify -1 to indicate to the end of the string.
   * @return -1 if arg string is not found in this string.
   */
  public native @ByVal __device__ find( @Cast("cudf::char_utf8") int character, @ByVal(nullValue = "size_type(0)") size_type pos, @ByVal(nullValue = "size_type(-1)") size_type count );
  public native @ByVal __device__ find( @Cast("cudf::char_utf8") int character );
  /**
   * \brief Returns the character position of the last occurrence where the
   * argument str is found in this string within the character range [pos,pos+n).
   *
   * @param str Target string to search within this string.
   * @param pos Character position to start search within this string.
   * @param count Number of characters from pos to include in the search.
   *              Specify -1 to indicate to the end of the string.
   * @return -1 if arg string is not found in this string.
   */
  public native @ByVal __device__ rfind( @Const @ByRef string_view str, @ByVal(nullValue = "size_type(0)") size_type pos, @ByVal(nullValue = "size_type(-1)") size_type count );
  public native @ByVal __device__ rfind( @Const @ByRef string_view str );
  /**
   * \brief Returns the character position of the last occurrence where the
   * array str is found in this string within the character range [pos,pos+n).
   *
   * @param str Target string to search with this string.
   * @param bytes Number of bytes in str.
   * @param pos Character position to start search within this string.
   * @param count Number of characters from pos to include in the search.
   *              Specify -1 to indicate to the end of the string.
   * @return -1 if arg string is not found in this string.
   */
  public native @ByVal __device__ rfind( @Cast("const char*") BytePointer str, @ByVal size_type bytes, @ByVal(nullValue = "size_type(0)") size_type pos, @ByVal(nullValue = "size_type(-1)") size_type count );
  public native @ByVal __device__ rfind( @Cast("const char*") BytePointer str, @ByVal size_type bytes );
  public native @ByVal __device__ rfind( String str, @ByVal size_type bytes, @ByVal(nullValue = "size_type(0)") size_type pos, @ByVal(nullValue = "size_type(-1)") size_type count );
  public native @ByVal __device__ rfind( String str, @ByVal size_type bytes );
  /**
   * \brief Returns the character position of the last occurrence where
   * character is found in this string within the character range [pos,pos+n).
   *
   * @param character Single encoded character.
   * @param pos Character position to start search within this string.
   * @param count Number of characters from pos to include in the search.
   *              Specify -1 to indicate to the end of the string.
   * @return -1 if arg string is not found in this string.
   */
  public native @ByVal __device__ rfind( @Cast("cudf::char_utf8") int character, @ByVal(nullValue = "size_type(0)") size_type pos, @ByVal(nullValue = "size_type(-1)") size_type count );
  public native @ByVal __device__ rfind( @Cast("cudf::char_utf8") int character );

  /**
   * \brief Return a sub-string of this string. The original string and device
   * memory must still be maintained for the lifetime of the returned instance.
   *
   * @param start Character position to start the sub-string.
   * @param length Number of characters from start to include in the sub-string.
   * @return New instance pointing to a subset of the characters within this instance.
   */
  public native @ByVal __device__ substr( @ByVal size_type start, @ByVal size_type length );
}
