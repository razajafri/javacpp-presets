// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cudf;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.cudf.global.cudf.*;


@Namespace("cudf::experimental") @NoOffset @Properties(inherit = org.bytedeco.cudf.presets.cudf.class)
public class table extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public table(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public table(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public table position(long position) {
        return (table)super.position(position);
    }

  public table() { super((Pointer)null); allocate(); }
  private native void allocate();
  public table(@ByVal table arg0) { super((Pointer)null); allocate(arg0); }
  private native void allocate(@ByVal table arg0);
  
  

  /**---------------------------------------------------------------------------*
   * \brief Construct a new table by copying the contents of another table.
   *---------------------------------------------------------------------------**/

  /**---------------------------------------------------------------------------*
   * \brief Moves the contents from a vector of {@code unique_ptr}s to columns to
   * construct a new table.
   *
   * @param columns The vector of {@code unique_ptr}s to columns whose contents will
   * be moved into the new table.
   *---------------------------------------------------------------------------**/
  public table(@StdVector @UniquePtr column columns) { super((Pointer)null); allocate(columns); }
  private native void allocate(@StdVector @UniquePtr column columns);

  /**---------------------------------------------------------------------------*
   * \brief Copy the contents of a {@code table_view} to construct a new {@code table}.
   *
   * @param view The view whose contents will be copied to create a new {@code table}
   * @param stream Optional, stream on which all memory allocations and copies
   * will be performed
   * @param mr Optional, the memory resource that will be used for allocating
   * the device memory for the new columns
   *---------------------------------------------------------------------------**/
  public table(@ByVal table_view view, @Cast("cudaStream_t") CUstream_st stream/*=0*/,
          device_memory_resource mr/*=rmm::mr::get_default_resource()*/) { super((Pointer)null); allocate(view, stream, mr); }
  private native void allocate(@ByVal table_view view, @Cast("cudaStream_t") CUstream_st stream/*=0*/,
          device_memory_resource mr/*=rmm::mr::get_default_resource()*/);
  public table(@ByVal table_view view) { super((Pointer)null); allocate(view); }
  private native void allocate(@ByVal table_view view);

  /**---------------------------------------------------------------------------*
   * \brief Returns the number of columns in the table
   *---------------------------------------------------------------------------**/
  public native @ByVal @NoException size_type num_columns();

  /**---------------------------------------------------------------------------*
   * \brief Returns the number of rows
   *---------------------------------------------------------------------------**/
  public native @ByVal @NoException size_type num_rows();

  /**---------------------------------------------------------------------------*
   * \brief Returns an immutable, non-owning {@code table_view} of the contents of
   *this {@code table}.
   *---------------------------------------------------------------------------**/
  public native @ByVal table_view view();

  /**---------------------------------------------------------------------------*
   * \brief Conversion operator to an immutable, non-owning {@code table_view} of the
   * contents of this {@code table}.
   *---------------------------------------------------------------------------**/
  public native @ByVal @Name("operator cudf::table_view") table_view asTable_view();

  /**---------------------------------------------------------------------------*
   * \brief Returns a mutable, non-owning {@code mutable_table_view} of the contents
   * of this {@code table}.
   *---------------------------------------------------------------------------**/
  public native @ByVal mutable_table_view mutable_view();

  /**---------------------------------------------------------------------------*
   * \brief Conversion operator to a mutable, non-owning {@code mutable_table_view} of
   *the contents of this {@code table}.
   *---------------------------------------------------------------------------**/
  public native @ByVal @Name("operator cudf::mutable_table_view") mutable_table_view asMutable_table_view();

  /**---------------------------------------------------------------------------*
   * \brief Releases ownership of the {@code column}s by returning a vector of
   * {@code unique_ptr}s to the constituent columns.
   *
   * After {@code release()}, {@code num_columns() == 0} and {@code num_rows() == 0}
   *---------------------------------------------------------------------------**/
  public native @StdVector @UniquePtr column release();

  /**---------------------------------------------------------------------------*
   * \brief Returns a table_view with set of specified columns.
   *
   * @throws std::out_of_range
   * If any element in {@code column_indices} is outside [0, num_columns())
   *
   * @param column_indices Indices of columns in the table
   * @return A table_view consisting of columns from the original table
   * specified by the elements of {@code column_indices}
   *---------------------------------------------------------------------------**/
  public native @ByVal table_view select(@StdVector size_type column_indices);

  /**---------------------------------------------------------------------------*
   * \brief Returns a reference to the specified column
   *
   * @throws std::out_of_range
   * If i is out of the range [0, num_columns)
   *
   * @param i Index of the desired column
   * @return A reference to the desired column
   *---------------------------------------------------------------------------**/
  public native @ByRef column get_column(@ByVal size_type column_index);

  /**---------------------------------------------------------------------------*
   * \brief Returns a const reference to the specified column
   *
   * @throws std::out_of_range
   * If i is out of the range [0, num_columns)
   *
   * @param i Index of the desired column
   * @return A const reference to the desired column
   *---------------------------------------------------------------------------**/
}
