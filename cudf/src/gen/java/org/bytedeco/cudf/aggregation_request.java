// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cudf;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.cudf.global.cudf.*;
 // namespace detail


/**
 * \brief Request for groupby aggregation(s) to perform on a column.
 *
 * The group membership of each {@code value[i]} is determined by the corresponding
 * row {@code i} in the original order of {@code keys} used to construct the
 * {@code groupby}. I.e., for each {@code aggregation}, {@code values[i]} is aggregated with all
 * other {@code values[j]} where rows {@code i} and {@code j} in {@code keys} are equivalent.
 *
 * {@code values.size()} column must equal {@code keys.num_rows()}.
 */
@Namespace("cudf::experimental::groupby") @Properties(inherit = org.bytedeco.cudf.presets.cudf.class)
public class aggregation_request extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public aggregation_request() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public aggregation_request(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public aggregation_request(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public aggregation_request position(long position) {
        return (aggregation_request)super.position(position);
    }

  /** The elements to aggregate */
  public native @ByRef column_view values(); public native aggregation_request values(column_view setter);
  /** Desired aggregations */
  public native @StdVector std::unique_ptr<aggregation> aggregations(); public native aggregation_request aggregations(std::unique_ptr<aggregation> setter);
}
