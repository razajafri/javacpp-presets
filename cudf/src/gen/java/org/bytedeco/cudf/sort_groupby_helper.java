// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cudf;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.cudf.global.cudf.*;


// TODO (dm): update documentation for whole file
/**
 * \brief Helper class for computing sort-based groupby
 * 
 * This class serves the purpose of sorting the keys and values and provides
 * building blocks for aggregations. It can provide:
 * 1. On-demand grouping or sorting of a value column based on {@code keys}
 *   which is provided at construction
 * 2. Group offsets: starting offsets of all groups in sorted key table
 * 3. Group valid sizes: The number of valid values in each group in a sorted
 *   value column
 */
@Namespace("cudf::experimental::groupby::detail::sort") @NoOffset @Properties(inherit = org.bytedeco.cudf.presets.cudf.class)
public class sort_groupby_helper extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public sort_groupby_helper(Pointer p) { super(p); }



  /**
   * \brief Construct a new helper object
   * 
   * If {@code ignore_null_keys == true}, then any row in {@code keys} containing a null
   * value will effectively be discarded. I.e., any values corresponding to
   * discarded rows in {@code keys} will not contribute to any aggregation. 
   *
   * @param keys table to group by
   * @param ignore_null_keys Ignore rows in keys with nulls
   * @param keys_pre_sorted Indicate if the keys are already sorted. Enables
   *                        optimizations to help skip re-sorting keys.
   */
  public sort_groupby_helper(@Const @ByRef table_view keys, @Cast("bool") boolean ignore_null_keys/*=true*/,
                        @Cast("bool") boolean keys_pre_sorted/*=false*/) { super((Pointer)null); allocate(keys, ignore_null_keys, keys_pre_sorted); }
  private native void allocate(@Const @ByRef table_view keys, @Cast("bool") boolean ignore_null_keys/*=true*/,
                        @Cast("bool") boolean keys_pre_sorted/*=false*/);
  public sort_groupby_helper(@Const @ByRef table_view keys) { super((Pointer)null); allocate(keys); }
  private native void allocate(@Const @ByRef table_view keys);
  
  
  public sort_groupby_helper(@ByVal sort_groupby_helper arg0) { super((Pointer)null); allocate(arg0); }
  private native void allocate(@ByVal sort_groupby_helper arg0);
  public native @ByRef @Name("operator =") sort_groupby_helper put(@ByVal sort_groupby_helper arg0);

  /**
   * \brief Groups a column of values according to {@code keys} and sorts within each
   *  group.
   * 
   * Groups the \p values where the groups are dictated by key table and each 
   * group is sorted in ascending order, with NULL elements positioned at the 
   * end of each group.
   * 
   * @throws cudf::logic_error if {@code values.size() != keys.num_rows()}
   * 
   * @param values The value column to group and sort
   * @return the sorted and grouped column
   */
  public native @UniquePtr column sorted_values(@Const @ByRef column_view values, 
      device_memory_resource mr/*=rmm::mr::get_default_resource()*/,
      @ByVal(nullValue = "cudaStream_t(0)") cudaStream_t stream);
  public native @UniquePtr column sorted_values(@Const @ByRef column_view values);

  /**
   * \brief Groups a column of values according to {@code keys}
   * 
   * The order of values within each group is undefined. 
   * 
   * @throws cudf::logic_error if {@code values.size() != keys.num_rows()}
   * 
   * @param values The value column to group
   * @return the grouped column
   */
  public native @UniquePtr column grouped_values(@Const @ByRef column_view values, 
      device_memory_resource mr/*=rmm::mr::get_default_resource()*/,
      @ByVal(nullValue = "cudaStream_t(0)") cudaStream_t stream);
  public native @UniquePtr column grouped_values(@Const @ByRef column_view values);

  /**
   * \brief Get a table of sorted unique keys
   * 
   * @return a new table in which each row is a unique row in the sorted key table.
   */
  public native @MoveUniquePtr table unique_keys(
      device_memory_resource mr/*=rmm::mr::get_default_resource()*/,
      @ByVal(nullValue = "cudaStream_t(0)") cudaStream_t stream);
  public native @MoveUniquePtr table unique_keys();

  /**
   * \brief Get the number of groups in {@code keys}
   */
  public native @ByVal size_type num_groups();

  /**
   * \brief Return the effective number of keys
   * 
   * When ignore_null_keys = false, returned value is same as {@code keys.num_rows()}
   * When ignore_null_keys = true, returned value is the number of rows in {@code keys}
   *  in which no element is null
   */
  public native @ByVal size_type num_keys(@ByVal(nullValue = "cudaStream_t(0)") cudaStream_t stream);
  public native @ByVal size_type num_keys();

  /**
   * \brief Get the sorted order of {@code keys}.
   *
   * Gathering {@code keys} by sort order indices will produce the sorted key table.
   * 
   * Computes and stores the key sorted order on first invocation, and returns
   * the stored order on subsequent calls.
   * 
   * @return the sort order indices for {@code keys}.
   */
  public native @ByVal column_view key_sort_order(@ByVal(nullValue = "cudaStream_t(0)") cudaStream_t stream);
  public native @ByVal column_view key_sort_order();

  /**
   * \brief Get each group's offset into the sorted order of {@code keys}. 
   * 
   * Computes and stores the group offsets on first invocation and returns
   * the stored group offsets on subsequent calls.
   * 
   * @return vector of offsets of the starting point of each group in the sorted key table
   */
  public native @Cast("const cudf::experimental::groupby::detail::sort::sort_groupby_helper::index_vector*") @ByRef RmmDeviceVectorCudfSizeType group_offsets(@ByVal(nullValue = "cudaStream_t(0)") cudaStream_t stream);
  public native @Cast("const cudf::experimental::groupby::detail::sort::sort_groupby_helper::index_vector*") @ByRef RmmDeviceVectorCudfSizeType group_offsets();

  /**
   * \brief Get the group labels corresponding to the sorted order of {@code keys}. 
   * 
   * Each group is assigned a unique numerical "label" in 
   * {@code [0, 1, 2, ... , num_groups() - 1, num_groups())}.
   * For a row in sorted {@code keys}, its corresponding group label indicates which
   * group it belongs to. 
   * 
   * Computes and stores labels on first invocation and returns stored labels on
   * subsequent calls.
   * 
   * @return vector of group labels for each row in the sorted key column
   */
  public native @Cast("const cudf::experimental::groupby::detail::sort::sort_groupby_helper::index_vector*") @ByRef RmmDeviceVectorCudfSizeType group_labels(@ByVal(nullValue = "cudaStream_t(0)") cudaStream_t stream);
  public native @Cast("const cudf::experimental::groupby::detail::sort::sort_groupby_helper::index_vector*") @ByRef RmmDeviceVectorCudfSizeType group_labels();
}
