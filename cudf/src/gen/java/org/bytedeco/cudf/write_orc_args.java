// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cudf;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.cudf.global.cudf.*;


/**
 * \brief Settings to use for {@code write_orc()}
 */
@Namespace("cudf::experimental::io") @NoOffset @Properties(inherit = org.bytedeco.cudf.presets.cudf.class)
public class write_orc_args extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public write_orc_args(Pointer p) { super(p); }

  /** Specify the sink to use for writer output */
  public native @ByRef sink_info sink(); public native write_orc_args sink(sink_info setter);
  /** Specify the compression format to use */
  public native @ByRef compression_type compression(); public native write_orc_args compression(compression_type setter);
  /** Set of columns to output */
  public native @ByRef table_view table(); public native write_orc_args table(table_view setter);
  /** Optional associated metadata */
  public native @Const table_metadata metadata(); public native write_orc_args metadata(table_metadata setter);

  public write_orc_args(@Const @ByRef sink_info snk, @Const @ByRef table_view table_,
                            @Const table_metadata metadata_/*=nullptr*/,
                            @ByVal(nullValue = "compression_type::AUTO") compression_type compression_) { super((Pointer)null); allocate(snk, table_, metadata_, compression_); }
  private native void allocate(@Const @ByRef sink_info snk, @Const @ByRef table_view table_,
                            @Const table_metadata metadata_/*=nullptr*/,
                            @ByVal(nullValue = "compression_type::AUTO") compression_type compression_);
  public write_orc_args(@Const @ByRef sink_info snk, @Const @ByRef table_view table_) { super((Pointer)null); allocate(snk, table_); }
  private native void allocate(@Const @ByRef sink_info snk, @Const @ByRef table_view table_);
}
