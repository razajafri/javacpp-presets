// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cudf;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.cudf.global.cudf.*;

/**
 * \brief Base class for specifying the desired aggregation in an
 * {@code aggregation_request}.
 *
 * This type is meant to be opaque in the public interface.
 *
 * Other kinds of aggregations may derive from this class to encapsulate
 * additional information needed to compute the aggregation.
 */
@Namespace("cudf::experimental") @NoOffset @Properties(inherit = org.bytedeco.cudf.presets.cudf.class)
public class aggregation extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public aggregation(Pointer p) { super(p); }

  /**
   * \brief Possible aggregation operations
   */
  /** enum cudf::experimental::aggregation::Kind */
  public static final int
    /** sum reduction */
    SUM = 0,
    /** min reduction */
    MIN = 1,
    /** max reduction */
    MAX = 2,
    /** count number of elements */
    COUNT = 3,
    /** arithmetic mean reduction */
    MEAN = 4,
    /** groupwise variance */
    VARIANCE = 5,
    /** groupwise standard deviation */
    STD = 6,
    /** median reduction */
    MEDIAN = 7,
    /** compute specified quantile(s) */
    QUANTILE = 8,
    /** Index of max element */
    ARGMAX = 9,
    /** Index of min element */
    ARGMIN = 10,
    /** PTX UDF based reduction */
    PTX = 11,
    /** CUDA UDf based reduction */
    CUDA = 12;

  public aggregation(@Cast("cudf::experimental::aggregation::Kind") int a) { super((Pointer)null); allocate(a); }
  private native void allocate(@Cast("cudf::experimental::aggregation::Kind") int a);
  /** The aggregation to perform */
  public native @Cast("cudf::experimental::aggregation::Kind") int kind(); public native aggregation kind(int setter);

  public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef aggregation other);
}
