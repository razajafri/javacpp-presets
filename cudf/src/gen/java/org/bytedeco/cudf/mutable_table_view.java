// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cudf;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.cudf.global.cudf.*;


/**---------------------------------------------------------------------------*
 * \brief A set of {@code mutable_column_view}s of the same size.
 *
 * All public member functions and constructors are inherited from
 *{@code table_view_base<mutable_column_view>}.
 *---------------------------------------------------------------------------**/
@Namespace("cudf") @Properties(inherit = org.bytedeco.cudf.presets.cudf.class)
public class mutable_table_view extends TableViewBaseMutableColumnView {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public mutable_table_view(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public mutable_table_view(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public mutable_table_view position(long position) {
        return (mutable_table_view)super.position(position);
    }


  public mutable_table_view() { super((Pointer)null); allocate(); }
  private native void allocate();

  public native @ByRef mutable_column_view column(@ByVal size_type column_index);
  /**---------------------------------------------------------------------------*
   * \brief Creates an immutable {@code table_view} of the columns
   *---------------------------------------------------------------------------**/
  public native @ByVal @Name("operator cudf::table_view") table_view asTable_view();

  /**---------------------------------------------------------------------------*
   * \brief Construct a table from a vector of table views
   *
   * \note Because a {@code std::vector} is constructible from a
   * {@code std::initializer_list}, this constructor also supports the following
   * usage:
   * <pre>{@code
   * table_view t0, t1, t2;
   * ...
   * table_view t{{t0,t1,t2}}; // Creates a `table` from the columns of
   * t0, t1, t2
   * }</pre>
   *
   * @throws cudf::logic_error
   * If number of rows mismatch
   *
   * @param views The vector of table views to construct the table from
   *---------------------------------------------------------------------------**/
  public mutable_table_view(@StdVector mutable_table_view views) { super((Pointer)null); allocate(views); }
  private native void allocate(@StdVector mutable_table_view views);
}
