// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cudf;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.cudf.global.cudf.*;


/**
 * \brief An owning class to represent a singular value
 * 
 * A scalar is a singular value of any of the supported datatypes in cudf. 
 * Classes derived from this class are used to represent a scalar. Objects of
 * derived classes should be upcasted to this class while passing to an
 * external libcudf API.
 */
@Namespace("cudf") @NoOffset @Properties(inherit = org.bytedeco.cudf.presets.cudf.class)
public class scalar extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public scalar(Pointer p) { super(p); }

  public scalar(@ByVal scalar other) { super((Pointer)null); allocate(other); }
  private native void allocate(@ByVal scalar other);
  
  
  
  /**
   * \brief Returns the scalar's logical value type
   */
  public native @ByVal @NoException data_type type();

  /**
   * \brief Updates the validity of the value
   * 
   * @param is_valid true: set the value to valid. false: set it to null
   * @param stream The CUDA stream to do the operation in
   */
  public native void set_valid(@Cast("bool") boolean is_valid, @ByVal(nullValue = "cudaStream_t(0)") cudaStream_t stream);
  public native void set_valid(@Cast("bool") boolean is_valid);

  /**
   * \brief Indicates whether the scalar contains a valid value
   *
   * \note Using the value when {@code is_valid() == false} is undefined behaviour
   * 
   * @param stream The CUDA stream to do the operation in
   * @return true Value is valid
   * @return false Value is invalid/null
   */
  public native @Cast("bool") boolean is_valid(@ByVal(nullValue = "cudaStream_t(0)") cudaStream_t stream);
  public native @Cast("bool") boolean is_valid();

  /**
   * \brief Returns a raw pointer to the validity bool in device memory
   */
  public native @Cast("bool*") BoolPointer validity_data();
}
