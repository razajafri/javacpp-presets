// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cudf;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.cudf.global.cudf.*;


/**
 * \brief Options for the Avro reader.
 */
@Namespace("cudf::experimental::io::detail::avro") @NoOffset @Properties(inherit = org.bytedeco.cudf.presets.cudf.class)
public class reader_options extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public reader_options(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public reader_options(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public reader_options position(long position) {
        return (reader_options)super.position(position);
    }

  public native @StdString @StdVector BytePointer columns(); public native reader_options columns(BytePointer setter);

  public reader_options() { super((Pointer)null); allocate(); }
  private native void allocate();
  public reader_options(@Const @ByRef reader_options arg0) { super((Pointer)null); allocate(arg0); }
  private native void allocate(@Const @ByRef reader_options arg0);

  /**
   * \brief Constructor to populate reader options.
   *
   * @param columns Set of columns to read; empty for all columns
   */
  public reader_options(@StdString @StdVector BytePointer columns) { super((Pointer)null); allocate(columns); }
  private native void allocate(@StdString @StdVector BytePointer columns);
}
