// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cudf;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.cudf.global.cudf.*;

/**---------------------------------------------------------------------------*
 * \brief Base class for a table of {@code ColumnView}s
 *
 * This class should not be used directly. Instead:
 * -{@code table_view} should be used for a table of {@code column_view}s
 * -{@code mutable_table_view} should be used for a table of {@code mutable_column_view}s
 *
 * All public constructors and member functions of {@code table_view_base} are
 * available in both {@code table_view} and {@code mutable_table_view}.
 *
 * \tparam ColumnView The type of column view the table contains
 *---------------------------------------------------------------------------**/
@Name("cudf::detail::table_view_base<cudf::column_view>") @NoOffset @Properties(inherit = org.bytedeco.cudf.presets.cudf.class)
public class TableViewBaseColumnView extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TableViewBaseColumnView(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public TableViewBaseColumnView(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public TableViewBaseColumnView position(long position) {
        return (TableViewBaseColumnView)super.position(position);
    }


  /**---------------------------------------------------------------------------*
   * \brief Construct a table from a vector of column views
   *
   * \note Because a {@code std::vector} is constructible from a
   * {@code std::initializer_list}, this constructor also supports the following
   * usage:
   * <pre>{@code
   * column_view c0, c1, c2;
   * ...
   * table_view t{{c0,c1,c2}}; // Creates a `table` from c0, c1, c2
   * }</pre>
   *
   * @throws cudf::logic_error If all views do not have the same size
   *
   * @param cols The vector of columns to construct the table from
   *---------------------------------------------------------------------------**/
  public TableViewBaseColumnView(@StdVector column_view cols) { super((Pointer)null); allocate(cols); }
  private native void allocate(@StdVector column_view cols);

  /**---------------------------------------------------------------------------*
   * \brief Returns an iterator to the first view in the {@code table}.
   *---------------------------------------------------------------------------**/
  public native @ByVal @Cast("cudf::detail::table_view_base<cudf::column_view>::iterator*") @NoException decltype(std::begin(_columns))) begin();

  /**---------------------------------------------------------------------------*
   * \brief Returns an iterator to the first view in the {@code table}.
   *---------------------------------------------------------------------------**/

  /**---------------------------------------------------------------------------*
   * \brief Returns an iterator one past the last column view in the {@code table}.
   *
   * {@code end()} acts as a place holder. Attempting to dereference it results in
   * undefined behavior.
   *---------------------------------------------------------------------------**/
  public native @ByVal @Cast("cudf::detail::table_view_base<cudf::column_view>::iterator*") @NoException decltype(std::begin(_columns))) end();

  /**---------------------------------------------------------------------------*
   * \brief Returns an iterator one past the last column view in the {@code table}.
   *
   * {@code end()} acts as a place holder. Attempting to dereference it results in
   * undefined behavior.
   *---------------------------------------------------------------------------**/

  /**---------------------------------------------------------------------------*
   * \brief Returns a reference to the view of the specified column
   *
   * @throws std::out_of_range
   * If {@code column_index} is out of the range [0, num_columns)
   *
   * @param column_index The index of the desired column
   * @return A reference to the desired column
   *---------------------------------------------------------------------------**/
  public native @Const @ByRef column_view column(@ByVal size_type column_index);

  /**---------------------------------------------------------------------------*
   * \brief Returns the number of columns
   *---------------------------------------------------------------------------**/
  public native @ByVal @NoException size_type num_columns();

  /**---------------------------------------------------------------------------*
   * \brief Returns the number of rows
   *---------------------------------------------------------------------------**/
  public native @ByVal @NoException size_type num_rows();

  public TableViewBaseColumnView() { super((Pointer)null); allocate(); }
  private native void allocate();

  public TableViewBaseColumnView(@Const @ByRef TableViewBaseColumnView arg0) { super((Pointer)null); allocate(arg0); }
  private native void allocate(@Const @ByRef TableViewBaseColumnView arg0);
  public native @ByRef @Name("operator =") TableViewBaseColumnView put(@Const @ByRef TableViewBaseColumnView arg0);
}
