// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cudf;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.cudf.global.cudf.*;


/** -------------------------------------------------------------------------*
 * \brief validity accessor of column with null bitmask
 * A unary functor returns validity at {@code id}.
 * {@code operator() (cudf::size_type id)} computes validity flag at {@code id}
 * This functor is only allowed for nullable columns.
 *
 * @throws {@code cudf::logic_error} if the column is not nullable.
 * -------------------------------------------------------------------------**/
@Namespace("cudf::experimental::detail") @NoOffset @Properties(inherit = org.bytedeco.cudf.presets.cudf.class)
public class validity_accessor extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public validity_accessor(Pointer p) { super(p); }

  @MemberGetter public native @Const @ByRef column_device_view col();

  /** -------------------------------------------------------------------------*
   * \brief constructor
   * @param _col [in] column device view of cudf column
   * -------------------------------------------------------------------------**/
  public validity_accessor(@Const @ByRef column_device_view _col) { super((Pointer)null); allocate(_col); }
  private native void allocate(@Const @ByRef column_device_view _col);

  public native @ByVal @Name("operator ()") CUDA_DEVICE_CALLABLE apply(@ByVal size_type i);
}
