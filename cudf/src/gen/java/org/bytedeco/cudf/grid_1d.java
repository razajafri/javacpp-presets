// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cudf;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.cudf.global.cudf.*;


/**
 * \brief A kernel grid configuration construction gadget for simple
 * one-dimensional, with protection against integer overflow.
 */
@Namespace("cudf::experimental::detail") @NoOffset @Properties(inherit = org.bytedeco.cudf.presets.cudf.class)
public class grid_1d extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public grid_1d(Pointer p) { super(p); }

  @MemberGetter public native int num_threads_per_block();
  @MemberGetter public native int num_blocks();
  /**
   * @param overall_num_elements The number of elements the kernel needs to
   * handle/process, in its main, one-dimensional/linear input (e.g. one or more
   * cuDF columns)
   * @param num_threads_per_block The grid block size, determined according to
   * the kernel's specific features (amount of shared memory necessary, SM
   * functional units use pattern etc.); this can't be determined
   * generically/automatically (as opposed to the number of blocks)
   * @param elements_per_thread Typically, a single kernel thread processes more
   * than a single element; this affects the number of threads the grid must
   * contain
   */
  public grid_1d(@ByVal size_type overall_num_elements,
            @ByVal size_type num_threads_per_block_,
            @ByVal(nullValue = "cudf::size_type(1)") size_type elements_per_thread) { super((Pointer)null); allocate(overall_num_elements, num_threads_per_block_, elements_per_thread); }
  private native void allocate(@ByVal size_type overall_num_elements,
            @ByVal size_type num_threads_per_block_,
            @ByVal(nullValue = "cudf::size_type(1)") size_type elements_per_thread);
  public grid_1d(@ByVal size_type overall_num_elements,
            @ByVal size_type num_threads_per_block_) { super((Pointer)null); allocate(overall_num_elements, num_threads_per_block_); }
  private native void allocate(@ByVal size_type overall_num_elements,
            @ByVal size_type num_threads_per_block_);
}
