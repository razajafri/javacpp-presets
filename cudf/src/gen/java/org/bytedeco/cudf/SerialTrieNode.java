// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cudf;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.cudf.global.cudf.*;


@NoOffset @Properties(inherit = org.bytedeco.cudf.presets.cudf.class)
public class SerialTrieNode extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SerialTrieNode(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SerialTrieNode(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public SerialTrieNode position(long position) {
        return (SerialTrieNode)super.position(position);
    }

	public native short children_offset(); public native SerialTrieNode children_offset(short setter);
	public native @Cast("char") byte character(); public native SerialTrieNode character(byte setter);
	public native @Cast("bool") boolean is_leaf(); public native SerialTrieNode is_leaf(boolean setter);
    public SerialTrieNode() { super((Pointer)null); allocate(); }
    private native void allocate(); // FIXME This is necessary for a Thrust bug on CentOS7 + CUDA10
	public SerialTrieNode(@Cast("char") byte c, @Cast("bool") boolean leaf/*=false*/) { super((Pointer)null); allocate(c, leaf); }
	@NoException private native void allocate(@Cast("char") byte c, @Cast("bool") boolean leaf/*=false*/);
	public SerialTrieNode(@Cast("char") byte c) { super((Pointer)null); allocate(c); }
	@NoException private native void allocate(@Cast("char") byte c);
}
