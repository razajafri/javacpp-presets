// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cudf;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.cudf.global.cudf.*;

/**
 * \brief Derived class for specifying a quantile aggregation
 */
@Namespace("cudf::experimental::detail") @NoOffset @Properties(inherit = org.bytedeco.cudf.presets.cudf.class)
public class quantile_aggregation extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public quantile_aggregation(Pointer p) { super(p); }

  public quantile_aggregation(@StdVector DoublePointer q,
                         @ByVal interpolation i) { super((Pointer)null); allocate(q, i); }
  private native void allocate(@StdVector DoublePointer q,
                         @ByVal interpolation i);
  public quantile_aggregation(@StdVector DoubleBuffer q,
                         @ByVal interpolation i) { super((Pointer)null); allocate(q, i); }
  private native void allocate(@StdVector DoubleBuffer q,
                         @ByVal interpolation i);
  public quantile_aggregation(@StdVector double[] q,
                         @ByVal interpolation i) { super((Pointer)null); allocate(q, i); }
  private native void allocate(@StdVector double[] q,
                         @ByVal interpolation i);
  /** Desired quantile(s) */
  public native @StdVector DoublePointer _quantiles(); public native quantile_aggregation _quantiles(DoublePointer setter);
  /** Desired interpolation */
  public native @ByRef interpolation _interpolation(); public native quantile_aggregation _interpolation(interpolation setter);

  public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef quantile_aggregation other);
}
