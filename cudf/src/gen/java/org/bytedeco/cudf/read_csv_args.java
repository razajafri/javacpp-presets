// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cudf;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.cudf.global.cudf.*;


/**
 * \brief Settings to use for {@code read_csv()}
 */
@Namespace("cudf::experimental::io") @NoOffset @Properties(inherit = org.bytedeco.cudf.presets.cudf.class)
public class read_csv_args extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public read_csv_args(Pointer p) { super(p); }

  public native @ByRef source_info source(); public native read_csv_args source(source_info setter);

  // Read settings

  /** Specify the compression format of the source or infer from file extension */
  public native @ByRef compression_type compression(); public native read_csv_args compression(compression_type setter);
  /** Bytes to skip from the source start */
  public native @Cast("size_t") long byte_range_offset(); public native read_csv_args byte_range_offset(long setter);
  /** Bytes to read; always reads complete rows */
  public native @Cast("size_t") long byte_range_size(); public native read_csv_args byte_range_size(long setter);
  /** Names of all the columns; if empty then names are auto-generated */
  public native @StdString @StdVector BytePointer names(); public native read_csv_args names(BytePointer setter);
  /** If there is no header or names, prepend this to the column ID as the name */
  public native @StdString BytePointer prefix(); public native read_csv_args prefix(BytePointer setter);
  /** Whether to rename duplicate column names */
  public native @Cast("bool") boolean mangle_dupe_cols(); public native read_csv_args mangle_dupe_cols(boolean setter);

  // Filter settings

  /** Names of columns to read; empty is all columns */
  public native @StdString @StdVector BytePointer use_cols_names(); public native read_csv_args use_cols_names(BytePointer setter);
  /** Indexes of columns to read; empty is all columns */
  public native @StdVector IntPointer use_cols_indexes(); public native read_csv_args use_cols_indexes(IntPointer setter);
  /** Rows to read; -1 is all */
  public native @ByRef size_type nrows(); public native read_csv_args nrows(size_type setter);
  /** Rows to skip from the start; -1 is none */
  public native @ByRef size_type skiprows(); public native read_csv_args skiprows(size_type setter);
  /** Rows to skip from the end */
  public native @ByRef size_type skipfooter(); public native read_csv_args skipfooter(size_type setter);
  /** Header row index */
  public native @ByRef size_type header(); public native read_csv_args header(size_type setter);

  // Parsing settings

  /** Line terminator */
  public native @Cast("char") byte lineterminator(); public native read_csv_args lineterminator(byte setter);
  /** Field delimiter */
  public native @Cast("char") byte delimiter(); public native read_csv_args delimiter(byte setter);
  /** Numeric data thousands seperator; cannot match delimiter */
  public native @Cast("char") byte thousands(); public native read_csv_args thousands(byte setter);
  /** Decimal point character; cannot match delimiter */
  public native @Cast("char") byte decimal(); public native read_csv_args decimal(byte setter);
  /** Comment line start character */
  public native @Cast("char") byte comment(); public native read_csv_args comment(byte setter);
  /** Treat {@code \r\n} as line terminator */
  public native @Cast("bool") boolean windowslinetermination(); public native read_csv_args windowslinetermination(boolean setter);
  /** Treat whitespace as field delimiter; overrides character delimiter */
  public native @Cast("bool") boolean delim_whitespace(); public native read_csv_args delim_whitespace(boolean setter);
  /** Skip whitespace after the delimiter */
  public native @Cast("bool") boolean skipinitialspace(); public native read_csv_args skipinitialspace(boolean setter);
  /** Ignore empty lines or parse line values as invalid */
  public native @Cast("bool") boolean skip_blank_lines(); public native read_csv_args skip_blank_lines(boolean setter);
  /** Treatment of quoting behavior */
  public native @ByRef quote_style quoting(); public native read_csv_args quoting(quote_style setter);
  /** Quoting character (if {@code quoting} is true) */
  public native @Cast("char") byte quotechar(); public native read_csv_args quotechar(byte setter);
  /** Whether a quote inside a value is double-quoted */
  public native @Cast("bool") boolean doublequote(); public native read_csv_args doublequote(boolean setter);
  /** Names of columns to read as datetime */
  public native @StdString @StdVector BytePointer infer_date_names(); public native read_csv_args infer_date_names(BytePointer setter);
  /** Indexes of columns to read as datetime */
  public native @StdVector IntPointer infer_date_indexes(); public native read_csv_args infer_date_indexes(IntPointer setter);

  // Conversion settings

  /** Per-column types; disables type inference on those columns */
  public native @StdString @StdVector BytePointer dtype(); public native read_csv_args dtype(BytePointer setter);
  /** Additional values to recognize as boolean true values */
  public native @StdString @StdVector BytePointer true_values(); public native read_csv_args true_values(BytePointer setter);
  /** Additional values to recognize as boolean false values */
  public native @StdString @StdVector BytePointer false_values(); public native read_csv_args false_values(BytePointer setter);
  /** Additional values to recognize as null values */
  public native @StdString @StdVector BytePointer na_values(); public native read_csv_args na_values(BytePointer setter);
  /** Whether to keep the built-in default NA values */
  public native @Cast("bool") boolean keep_default_na(); public native read_csv_args keep_default_na(boolean setter);
  /** Whether to disable null filter; disabling can improve performance */
  public native @Cast("bool") boolean na_filter(); public native read_csv_args na_filter(boolean setter);
  /** Whether to parse dates as DD/MM versus MM/DD */
  public native @Cast("bool") boolean dayfirst(); public native read_csv_args dayfirst(boolean setter);
  /** Cast timestamp columns to a specific type */
  public native @ByRef data_type timestamp_type(); public native read_csv_args timestamp_type(data_type setter);

  public read_csv_args(@Const @ByRef source_info src) { super((Pointer)null); allocate(src); }
  private native void allocate(@Const @ByRef source_info src);
}
