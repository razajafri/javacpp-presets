// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cudf;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.cudf.global.cudf.*;



/**
 * \brief The C representation of a column in CUDF. This is the main unit of operation.
 *
 * This struct contains pointers to GPU memory and metadata to describe data layout.
 */
@Properties(inherit = org.bytedeco.cudf.presets.cudf.class)
public class gdf_column extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public gdf_column() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public gdf_column(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public gdf_column(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public gdf_column position(long position) {
        return (gdf_column)super.position(position);
    }

    /** Type Erased pointer to the column data */
    public native Pointer data(); public native gdf_column data(Pointer setter);
    /** Pointer to the columns validity bit mask where the 'i'th bit indicates if the 'i'th row is NULL */
    public native @Cast("gdf_valid_type*") BytePointer valid(); public native gdf_column valid(BytePointer setter);
    /** Number of data elements in the columns data buffer. Limited to 2^31 - 1. */
    public native @Cast("gdf_size_type") int size(); public native gdf_column size(int setter);
    /** The datatype of the column's data */
    public native @Cast("gdf_dtype") int dtype(); public native gdf_column dtype(int setter);
    /** The number of NULL values in the column's data */
    public native @Cast("gdf_size_type") int null_count(); public native gdf_column null_count(int setter);
    /** gdf_dtype_extra_info which stores extra information about the column's gdf_dtype */
    public native @ByRef gdf_dtype_extra_info dtype_info(); public native gdf_column dtype_info(gdf_dtype_extra_info setter);
    /** Host side null terminated string with name of the column */
    public native @Cast("char*") BytePointer col_name(); public native gdf_column col_name(BytePointer setter);
}
