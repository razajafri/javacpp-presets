// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cudf;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.cudf.global.cudf.*;

@NoOffset @Name("std::pair<std::unique_ptr<rmm::device_buffer>,cudf::size_type>") @Properties(inherit = org.bytedeco.cudf.presets.cudf.class)
public class PairOfUniquePtrRmmDeviceBufferCudfSizeType extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PairOfUniquePtrRmmDeviceBufferCudfSizeType(Pointer p) { super(p); }
    public PairOfUniquePtrRmmDeviceBufferCudfSizeType(std::unique_ptr<rmm::device_buffer> firstValue, size_type secondValue) { this(); put(firstValue, secondValue); }
    public PairOfUniquePtrRmmDeviceBufferCudfSizeType()       { allocate();  }
    private native void allocate();
    public native @Name("operator=") @ByRef PairOfUniquePtrRmmDeviceBufferCudfSizeType put(@ByRef PairOfUniquePtrRmmDeviceBufferCudfSizeType x);


    @MemberGetter public native @ByRef std::unique_ptr<rmm::device_buffer> first(); public native PairOfUniquePtrRmmDeviceBufferCudfSizeType first(std::unique_ptr<rmm::device_buffer> first);
    @MemberGetter public native @ByRef size_type second();  public native PairOfUniquePtrRmmDeviceBufferCudfSizeType second(size_type second);

    public PairOfUniquePtrRmmDeviceBufferCudfSizeType put(std::unique_ptr<rmm::device_buffer> firstValue, size_type secondValue) {
        first(firstValue);
        second(secondValue);
        return this;
    }
}

