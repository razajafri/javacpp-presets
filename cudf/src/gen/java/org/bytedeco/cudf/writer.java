// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cudf;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.cudf.global.cudf.*;


/**
 * \brief Class to write ORC dataset data into columns.
 */
@Namespace("cudf::experimental::io::detail::orc") @NoOffset @Properties(inherit = org.bytedeco.cudf.presets.cudf.class)
public class writer extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public writer(Pointer p) { super(p); }

  /**
   * \brief Constructor for output to a file.
   *
   * @param filepath Path to the output file
   * @param options Settings for controlling writing behavior
   * @param mr Optional resource to use for device memory allocation
   */
  public writer(
        @StdString BytePointer filepath, @Const @ByRef writer_options options,
        device_memory_resource mr/*=rmm::mr::get_default_resource()*/) { super((Pointer)null); allocate(filepath, options, mr); }
  private native void allocate(
        @StdString BytePointer filepath, @Const @ByRef writer_options options,
        device_memory_resource mr/*=rmm::mr::get_default_resource()*/);
  public writer(
        @StdString BytePointer filepath, @Const @ByRef writer_options options) { super((Pointer)null); allocate(filepath, options); }
  private native void allocate(
        @StdString BytePointer filepath, @Const @ByRef writer_options options);
  public writer(
        @StdString String filepath, @Const @ByRef writer_options options,
        device_memory_resource mr/*=rmm::mr::get_default_resource()*/) { super((Pointer)null); allocate(filepath, options, mr); }
  private native void allocate(
        @StdString String filepath, @Const @ByRef writer_options options,
        device_memory_resource mr/*=rmm::mr::get_default_resource()*/);
  public writer(
        @StdString String filepath, @Const @ByRef writer_options options) { super((Pointer)null); allocate(filepath, options); }
  private native void allocate(
        @StdString String filepath, @Const @ByRef writer_options options);
  
  /**
   * \brief Constructor for output to host buffer.
   *
   * @param buffer Pointer to the output vector
   * @param options Settings for controlling writing behavior
   * @param mr Optional resource to use for device memory allocation
   */
  public writer(
        @Cast("char*") @StdVector ByteBuffer buffer, @Const @ByRef writer_options options,
        device_memory_resource mr/*=rmm::mr::get_default_resource()*/) { super((Pointer)null); allocate(buffer, options, mr); }
  private native void allocate(
        @Cast("char*") @StdVector ByteBuffer buffer, @Const @ByRef writer_options options,
        device_memory_resource mr/*=rmm::mr::get_default_resource()*/);
  public writer(
        @Cast("char*") @StdVector ByteBuffer buffer, @Const @ByRef writer_options options) { super((Pointer)null); allocate(buffer, options); }
  private native void allocate(
        @Cast("char*") @StdVector ByteBuffer buffer, @Const @ByRef writer_options options);
  public writer(
        @Cast("char*") @StdVector byte[] buffer, @Const @ByRef writer_options options,
        device_memory_resource mr/*=rmm::mr::get_default_resource()*/) { super((Pointer)null); allocate(buffer, options, mr); }
  private native void allocate(
        @Cast("char*") @StdVector byte[] buffer, @Const @ByRef writer_options options,
        device_memory_resource mr/*=rmm::mr::get_default_resource()*/);
  public writer(
        @Cast("char*") @StdVector byte[] buffer, @Const @ByRef writer_options options) { super((Pointer)null); allocate(buffer, options); }
  private native void allocate(
        @Cast("char*") @StdVector byte[] buffer, @Const @ByRef writer_options options);
    
  /**
   * \brief Destructor explicitly-declared to avoid inlined in header
   */

  /**
   * \brief Writes the entire dataset.
   *
   * @param table Set of columns to output
   * @param metadata Table metadata and column names
   * @param stream Optional stream to use for device memory alloc and kernels
   */
  public native void write_all(@Const @ByRef table_view table, @Const table_metadata metadata/*=nullptr*/, @Cast("cudaStream_t") CUstream_st stream/*=0*/);
  public native void write_all(@Const @ByRef table_view table);
}
