// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cudf;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.cudf.global.cudf.*;



/** 
 * \brief  This struct holds various information about how an operation should be 
 * performed as well as additional information about the input data.
 */
@Properties(inherit = org.bytedeco.cudf.presets.cudf.class)
public class gdf_context extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public gdf_context() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public gdf_context(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public gdf_context(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public gdf_context position(long position) {
        return (gdf_context)super.position(position);
    }

  /** Indicates if the input data is sorted. 0 = No, 1 = yes */
  public native int flag_sorted(); public native gdf_context flag_sorted(int setter);
  /** The method to be used for the operation (e.g., sort vs hash) */
  public native @Cast("gdf_method") int flag_method(); public native gdf_context flag_method(int setter);
  /** for COUNT: DISTINCT = 1, else = 0 */
  public native int flag_distinct(); public native gdf_context flag_distinct(int setter);
  /** When method is GDF_HASH, 0 = result is not sorted, 1 = result is sorted */
  public native int flag_sort_result(); public native gdf_context flag_sort_result(int setter);
  /** 0 = No sort in place allowed, 1 = else */
  public native int flag_sort_inplace(); public native gdf_context flag_sort_inplace(int setter);
   
  /** false = Nulls are ignored in group by keys (Pandas style), 
                                  true = Nulls are treated as values in group by keys where NULL == NULL (SQL style)*/
  public native @Cast("bool") boolean flag_groupby_include_nulls(); public native gdf_context flag_groupby_include_nulls(boolean setter); 
  
  /** Indicates how nulls are treated in group_by/order_by operations */
  public native @Cast("gdf_null_sort_behavior") int flag_null_sort_behavior(); public native gdf_context flag_null_sort_behavior(int setter);
}
