// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cudf;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.cudf.global.cudf.*;


/**
 * \brief An owning class to represent a string in device memory
 */
@Namespace("cudf") @NoOffset @Properties(inherit = org.bytedeco.cudf.presets.cudf.class)
public class string_scalar extends scalar {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public string_scalar(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public string_scalar(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public string_scalar position(long position) {
        return (string_scalar)super.position(position);
    }


  public string_scalar() { super((Pointer)null); allocate(); }
  private native void allocate();
  public string_scalar(@ByVal string_scalar other) { super((Pointer)null); allocate(other); }
  private native void allocate(@ByVal string_scalar other);
  
  

  /**
   * \brief Construct a new string scalar object
   * 
   * @param value The value of the string
   * @param is_valid Whether the value held by the scalar is valid
   * @param stream The CUDA stream to do the allocation in
   * @param mr The memory resource to use for allocation
   */
  public string_scalar(@StdString BytePointer string, @Cast("bool") boolean is_valid/*=true*/, 
        @ByVal(nullValue = "cudaStream_t(0)") cudaStream_t stream,
        device_memory_resource mr/*=rmm::mr::get_default_resource()*/) { super((Pointer)null); allocate(string, is_valid, stream, mr); }
  private native void allocate(@StdString BytePointer string, @Cast("bool") boolean is_valid/*=true*/, 
        @ByVal(nullValue = "cudaStream_t(0)") cudaStream_t stream,
        device_memory_resource mr/*=rmm::mr::get_default_resource()*/);
  public string_scalar(@StdString BytePointer string) { super((Pointer)null); allocate(string); }
  private native void allocate(@StdString BytePointer string);
  public string_scalar(@StdString String string, @Cast("bool") boolean is_valid/*=true*/, 
        @ByVal(nullValue = "cudaStream_t(0)") cudaStream_t stream,
        device_memory_resource mr/*=rmm::mr::get_default_resource()*/) { super((Pointer)null); allocate(string, is_valid, stream, mr); }
  private native void allocate(@StdString String string, @Cast("bool") boolean is_valid/*=true*/, 
        @ByVal(nullValue = "cudaStream_t(0)") cudaStream_t stream,
        device_memory_resource mr/*=rmm::mr::get_default_resource()*/);
  public string_scalar(@StdString String string) { super((Pointer)null); allocate(string); }
  private native void allocate(@StdString String string);

  /**
   * \brief Construct a new string scalar object from string_view
   * Note that this function copies the data pointed by string_view.
   * 
   * @param source string_view pointing string value to copy
   * @param is_valid Whether the value held by the scalar is valid
   * @param stream The CUDA stream to do the allocation in
   * @param mr The memory resource to use for allocation
   */
  public string_scalar(@Cast("const cudf::string_scalar::value_type*") @ByRef cudf::string_view source, @Cast("bool") boolean is_valid/*=true*/, 
        @ByVal(nullValue = "cudaStream_t(0)") cudaStream_t stream,
        device_memory_resource mr/*=rmm::mr::get_default_resource()*/) { super((Pointer)null); allocate(source, is_valid, stream, mr); }
  private native void allocate(@Cast("const cudf::string_scalar::value_type*") @ByRef cudf::string_view source, @Cast("bool") boolean is_valid/*=true*/, 
        @ByVal(nullValue = "cudaStream_t(0)") cudaStream_t stream,
        device_memory_resource mr/*=rmm::mr::get_default_resource()*/);
  public string_scalar(@Cast("const cudf::string_scalar::value_type*") @ByRef cudf::string_view source) { super((Pointer)null); allocate(source); }
  private native void allocate(@Cast("const cudf::string_scalar::value_type*") @ByRef cudf::string_view source);

  /**
   * \brief Construct a new string scalar object from string_view in device memory
   * Note that this function copies the data pointed by string_view.
   * 
   * @param data device_scalar string_view pointing string value to copy
   * @param is_valid Whether the value held by the scalar is valid
   * @param stream The CUDA stream to do the allocation in
   * @param mr The memory resource to use for allocation
   */
  public string_scalar(@ByRef rmm::device_scalar<cudf::string_scalar::value_type> data, @Cast("bool") boolean is_valid/*=true*/, @ByVal(nullValue = "cudaStream_t(0)") cudaStream_t stream,
        device_memory_resource mr/*=rmm::mr::get_default_resource()*/) { super((Pointer)null); allocate(data, is_valid, stream, mr); }
  private native void allocate(@ByRef rmm::device_scalar<cudf::string_scalar::value_type> data, @Cast("bool") boolean is_valid/*=true*/, @ByVal(nullValue = "cudaStream_t(0)") cudaStream_t stream,
        device_memory_resource mr/*=rmm::mr::get_default_resource()*/);
  public string_scalar(@ByRef rmm::device_scalar<cudf::string_scalar::value_type> data) { super((Pointer)null); allocate(data); }
  private native void allocate(@ByRef rmm::device_scalar<cudf::string_scalar::value_type> data);

  /**
   * \brief Implicit conversion operator to get the value of the scalar in a host std::string
   */
  public native @Name("operator std::string") @StdString BytePointer asBytePointer();

  /**
   * \brief Get the value of the scalar in a host std::string
   * 
   * @param stream The CUDA stream to do the operation in
   */
  public native @StdString BytePointer to_string(@ByVal(nullValue = "cudaStream_t(0)") cudaStream_t stream);
  public native @StdString BytePointer to_string();
  
  /**
   * \brief Get the value of the scalar as a string_view
   * 
   * @param stream The CUDA stream to do the operation in
   */
  public native @ByVal @Cast("cudf::string_scalar::value_type*") cudf::string_view value(@ByVal(nullValue = "cudaStream_t(0)") cudaStream_t stream);
  public native @ByVal @Cast("cudf::string_scalar::value_type*") cudf::string_view value();
  
  /**
   * \brief Returns the size of the string in bytes
   */
  public native @ByVal size_type size();

  /**
   * \brief Returns a raw pointer to the string in device memory
   */
  public native @Cast("const char*") BytePointer data();
}
