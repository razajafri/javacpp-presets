// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cudf;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.cudf.global.cudf.*;


/**
 * \brief Given a column-view of strings type, an instance of this class
 * provides a wrapper on this compound column for strings operations.
 */
@Namespace("cudf") @NoOffset @Properties(inherit = org.bytedeco.cudf.presets.cudf.class)
public class strings_column_view extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public strings_column_view(Pointer p) { super(p); }

    public strings_column_view( @ByVal column_view strings_column ) { super((Pointer)null); allocate(strings_column); }
    private native void allocate( @ByVal column_view strings_column );
    public strings_column_view( @ByVal strings_column_view strings_view ) { super((Pointer)null); allocate(strings_view); }
    private native void allocate( @ByVal strings_column_view strings_view );
    public native @ByRef @Name("operator =") strings_column_view put(@Const @ByRef strings_column_view arg0);

    @MemberGetter public static native @Const @ByRef size_type offsets_column_index();
    @MemberGetter public static native @Const @ByRef size_type chars_column_index();

    /**
     * \brief Returns the parent column.
     */
    public native @ByVal column_view parent();

    /**
     * \brief Returns the internal column of offsets
     *
     * @throws cudf::logic error if this is an empty column
     */
    public native @ByVal column_view offsets();

    /**
     * \brief Returns the internal column of chars
     *
     * @throws cudf::logic error if this is an empty column
     */
    public native @ByVal column_view chars();

    /**
     * \brief Returns the number of bytes in the chars child column.
     *
     * This accounts for the offset of the strings' column_view and
     * for empty columns.
     */
    public native @ByVal @NoException size_type chars_size();
}
