// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cudf;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.cudf.global.cudf.*;


/**
 * \brief Class to read Avro dataset data into columns.
 */
@Namespace("cudf::experimental::io::detail::avro") @NoOffset @Properties(inherit = org.bytedeco.cudf.presets.cudf.class)
public class reader extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public reader(Pointer p) { super(p); }

  /**
   * \brief Constructor for a filepath to dataset.
   *
   * @param filepath Path to whole dataset
   * @param options Settings for controlling reading behavior
   * @param mr Optional resource to use for device memory allocation
   */
  public reader(
        @StdString BytePointer filepath, @Const @ByRef reader_options options,
        device_memory_resource mr/*=rmm::mr::get_default_resource()*/) { super((Pointer)null); allocate(filepath, options, mr); }
  private native void allocate(
        @StdString BytePointer filepath, @Const @ByRef reader_options options,
        device_memory_resource mr/*=rmm::mr::get_default_resource()*/);
  public reader(
        @StdString BytePointer filepath, @Const @ByRef reader_options options) { super((Pointer)null); allocate(filepath, options); }
  private native void allocate(
        @StdString BytePointer filepath, @Const @ByRef reader_options options);
  public reader(
        @StdString String filepath, @Const @ByRef reader_options options,
        device_memory_resource mr/*=rmm::mr::get_default_resource()*/) { super((Pointer)null); allocate(filepath, options, mr); }
  private native void allocate(
        @StdString String filepath, @Const @ByRef reader_options options,
        device_memory_resource mr/*=rmm::mr::get_default_resource()*/);
  public reader(
        @StdString String filepath, @Const @ByRef reader_options options) { super((Pointer)null); allocate(filepath, options); }
  private native void allocate(
        @StdString String filepath, @Const @ByRef reader_options options);

  /**
   * \brief Constructor for a memory buffer to dataset.
   *
   * @param buffer Pointer to whole dataset
   * @param length Host buffer size in bytes
   * @param options Settings for controlling reading behavior
   * @param mr Optional resource to use for device memory allocation
   */
  public reader(
        @Cast("const char*") BytePointer buffer, @Cast("size_t") long length, @Const @ByRef reader_options options,
        device_memory_resource mr/*=rmm::mr::get_default_resource()*/) { super((Pointer)null); allocate(buffer, length, options, mr); }
  private native void allocate(
        @Cast("const char*") BytePointer buffer, @Cast("size_t") long length, @Const @ByRef reader_options options,
        device_memory_resource mr/*=rmm::mr::get_default_resource()*/);
  public reader(
        @Cast("const char*") BytePointer buffer, @Cast("size_t") long length, @Const @ByRef reader_options options) { super((Pointer)null); allocate(buffer, length, options); }
  private native void allocate(
        @Cast("const char*") BytePointer buffer, @Cast("size_t") long length, @Const @ByRef reader_options options);
  public reader(
        String buffer, @Cast("size_t") long length, @Const @ByRef reader_options options,
        device_memory_resource mr/*=rmm::mr::get_default_resource()*/) { super((Pointer)null); allocate(buffer, length, options, mr); }
  private native void allocate(
        String buffer, @Cast("size_t") long length, @Const @ByRef reader_options options,
        device_memory_resource mr/*=rmm::mr::get_default_resource()*/);
  public reader(
        String buffer, @Cast("size_t") long length, @Const @ByRef reader_options options) { super((Pointer)null); allocate(buffer, length, options); }
  private native void allocate(
        String buffer, @Cast("size_t") long length, @Const @ByRef reader_options options);

  /**
   * \brief Constructor for an Arrow file to dataset.
   *
   * @param file Arrow file object of dataset
   * @param options Settings for controlling reading behavior
   * @param mr Optional resource to use for device memory allocation
   */
  public reader(
        @SharedPtr RandomAccessFile file,
        @Const @ByRef reader_options options,
        device_memory_resource mr/*=rmm::mr::get_default_resource()*/) { super((Pointer)null); allocate(file, options, mr); }
  private native void allocate(
        @SharedPtr RandomAccessFile file,
        @Const @ByRef reader_options options,
        device_memory_resource mr/*=rmm::mr::get_default_resource()*/);
  public reader(
        @SharedPtr RandomAccessFile file,
        @Const @ByRef reader_options options) { super((Pointer)null); allocate(file, options); }
  private native void allocate(
        @SharedPtr RandomAccessFile file,
        @Const @ByRef reader_options options);

  /**
   * \brief Destructor explicitly-declared to avoid inlined in header
   */

  /**
   * \brief Reads the entire dataset.
   *
   * @param stream Optional stream to use for device memory alloc and kernels
   *
   * @return The set of columns along with table metadata
   */
  public native @ByVal table_with_metadata read_all(@Cast("cudaStream_t") CUstream_st stream/*=0*/);
  public native @ByVal table_with_metadata read_all();

  /**
   * \brief Reads and returns a range of rows.
   *
   * @param skip_rows Number of rows to skip from the start
   * @param num_rows Number of rows to read; use {@code 0} for all remaining data
   * @param metadata Optional location to return table metadata
   * @param stream Optional stream to use for device memory alloc and kernels
   *
   * @return The set of columns along with table metadata
   */
  public native @ByVal table_with_metadata read_rows(@ByVal size_type skip_rows, @ByVal size_type num_rows,
                                  @Cast("cudaStream_t") CUstream_st stream/*=0*/);
  public native @ByVal table_with_metadata read_rows(@ByVal size_type skip_rows, @ByVal size_type num_rows);
}
