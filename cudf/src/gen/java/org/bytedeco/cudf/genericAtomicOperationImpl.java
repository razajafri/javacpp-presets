// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cudf;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.cudf.global.cudf.*;


    // -----------------------------------------------------------------------
    // specialized functions for operators
    // `atomicAdd` supports int32, float, double (signed int64 is not supproted.)
    // `atomicMin`, `atomicMax` support int32_t, int64_t
    // `atomicAnd`, `atomicOr`, `atomicXor` support int32_t, int64_t
    @Name("cudf::detail::genericAtomicOperationImpl<float,cudf::DeviceSum,4>") @Properties(inherit = org.bytedeco.cudf.presets.cudf.class)
public class genericAtomicOperationImpl extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public genericAtomicOperationImpl() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public genericAtomicOperationImpl(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public genericAtomicOperationImpl(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public genericAtomicOperationImpl position(long position) {
            return (genericAtomicOperationImpl)super.position(position);
        }
    
        public native @ByVal @Name("operator ()") __forceinline__ apply(@Cast("cudf::detail::genericAtomicOperationImpl<float,cudf::DeviceSum,4>::T*") FloatPointer addr, @Cast("const cudf::detail::genericAtomicOperationImpl<float,cudf::DeviceSum,4>::T") float update_value, @ByVal DeviceSum op);
        public native @ByVal @Name("operator ()") __forceinline__ apply(@Cast("cudf::detail::genericAtomicOperationImpl<float,cudf::DeviceSum,4>::T*") FloatBuffer addr, @Cast("const cudf::detail::genericAtomicOperationImpl<float,cudf::DeviceSum,4>::T") float update_value, @ByVal DeviceSum op);
        public native @ByVal @Name("operator ()") __forceinline__ apply(@Cast("cudf::detail::genericAtomicOperationImpl<float,cudf::DeviceSum,4>::T*") float[] addr, @Cast("const cudf::detail::genericAtomicOperationImpl<float,cudf::DeviceSum,4>::T") float update_value, @ByVal DeviceSum op);
    }
