// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cudf;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.cudf.global.cudf.*;


/**---------------------------------------------------------------------------*
 * \brief A structure to be used along with type_dispatcher to check if a
 * {@code column_view} has {@code NAN}.
 *---------------------------------------------------------------------------**/
@Namespace("cudf::experimental::detail") @Properties(inherit = org.bytedeco.cudf.presets.cudf.class)
public class has_nans extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public has_nans() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public has_nans(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public has_nans(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public has_nans position(long position) {
        return (has_nans)super.position(position);
    }


  /**---------------------------------------------------------------------------*
   * \brief Checks if {@code input} has {@code NAN}
   *
   * \note This will be applicable only for floating point type columns.
   *
   * @param input [in] The {@code column_view} which will be checked for {@code NAN}
   * @param stream [in] Optional CUDA stream on which to execute kernels
   *
   * @return bool true if {@code input} has {@code NAN} else false
   *---------------------------------------------------------------------------**/

  /**---------------------------------------------------------------------------*
   * \brief Checks if {@code input} has {@code NAN}
   *
   * \note This will be applicable only for non-floating point type columns. And
   * non-floating point columns can never have {@code NAN}, so it will always return 
   * false
   *
   * @param input [in] The {@code column_view} which will be checked for {@code NAN}
   * @param stream [in] Optional CUDA stream on which to execute kernels
   *
   * @return bool Always false as non-floating point columns can't have {@code NAN}
   *---------------------------------------------------------------------------**/
}
